/*
 * Schema of Azure Storage events published to Azure Event Grid
 *
 * Describes the schema of the Azure Storage events published to Azure Event Grid. This corresponds to the Data property of an EventGridEvent.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Microsoft.Storage
{
    /// <summary>
    /// Execution statistics of a specific policy action in a Blob Management cycle.
    /// </summary>
    [DataContract]
    public partial class StorageLifecyclePolicyActionSummaryDetail :  IEquatable<StorageLifecyclePolicyActionSummaryDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageLifecyclePolicyActionSummaryDetail" /> class.
        /// </summary>
        /// <param name="totalObjectsCount">Total number of objects to be acted on by this action..</param>
        /// <param name="successCount">Number of success operations of this action..</param>
        /// <param name="errorList">Error messages of this action if any..</param>
        public StorageLifecyclePolicyActionSummaryDetail(long totalObjectsCount = default(long), long successCount = default(long), string errorList = default(string))
        {
            this.TotalObjectsCount = totalObjectsCount;
            this.SuccessCount = successCount;
            this.ErrorList = errorList;
        }

        /// <summary>
        /// Total number of objects to be acted on by this action.
        /// </summary>
        /// <value>Total number of objects to be acted on by this action.</value>
        [DataMember(Name="totalObjectsCount", EmitDefaultValue=false)]
        public long TotalObjectsCount { get; set; }

        /// <summary>
        /// Number of success operations of this action.
        /// </summary>
        /// <value>Number of success operations of this action.</value>
        [DataMember(Name="successCount", EmitDefaultValue=false)]
        public long SuccessCount { get; set; }

        /// <summary>
        /// Error messages of this action if any.
        /// </summary>
        /// <value>Error messages of this action if any.</value>
        [DataMember(Name="errorList", EmitDefaultValue=false)]
        public string ErrorList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageLifecyclePolicyActionSummaryDetail {\n");
            sb.Append("  TotalObjectsCount: ").Append(TotalObjectsCount).Append("\n");
            sb.Append("  SuccessCount: ").Append(SuccessCount).Append("\n");
            sb.Append("  ErrorList: ").Append(ErrorList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageLifecyclePolicyActionSummaryDetail);
        }

        /// <summary>
        /// Returns true if StorageLifecyclePolicyActionSummaryDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageLifecyclePolicyActionSummaryDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageLifecyclePolicyActionSummaryDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalObjectsCount == input.TotalObjectsCount ||
                    (this.TotalObjectsCount != null &&
                    this.TotalObjectsCount.Equals(input.TotalObjectsCount))
                ) && 
                (
                    this.SuccessCount == input.SuccessCount ||
                    (this.SuccessCount != null &&
                    this.SuccessCount.Equals(input.SuccessCount))
                ) && 
                (
                    this.ErrorList == input.ErrorList ||
                    (this.ErrorList != null &&
                    this.ErrorList.Equals(input.ErrorList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalObjectsCount != null)
                    hashCode = hashCode * 59 + this.TotalObjectsCount.GetHashCode();
                if (this.SuccessCount != null)
                    hashCode = hashCode * 59 + this.SuccessCount.GetHashCode();
                if (this.ErrorList != null)
                    hashCode = hashCode * 59 + this.ErrorList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
