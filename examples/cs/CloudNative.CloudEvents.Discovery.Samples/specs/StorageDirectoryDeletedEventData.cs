/*
 * Schema of Azure Storage events published to Azure Event Grid
 *
 * Describes the schema of the Azure Storage events published to Azure Event Grid. This corresponds to the Data property of an EventGridEvent.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Microsoft.Storage
{
    /// <summary>
    /// Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryDeleted event.
    /// </summary>
    [DataContract]
    public partial class StorageDirectoryDeletedEventData :  IEquatable<StorageDirectoryDeletedEventData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageDirectoryDeletedEventData" /> class.
        /// </summary>
        /// <param name="api">The name of the API/operation that triggered this event..</param>
        /// <param name="clientRequestId">A request id provided by the client of the storage API operation that triggered this event..</param>
        /// <param name="requestId">The request id generated by the storage service for the storage API operation that triggered this event..</param>
        /// <param name="url">The path to the deleted directory..</param>
        /// <param name="recursive">Is this event for a recursive delete operation..</param>
        /// <param name="sequencer">An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name..</param>
        /// <param name="identity">The identity of the requester that triggered this event..</param>
        /// <param name="storageDiagnostics">For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers..</param>
        public StorageDirectoryDeletedEventData(string api = default(string), string clientRequestId = default(string), string requestId = default(string), string url = default(string), string recursive = default(string), string sequencer = default(string), string identity = default(string), Object storageDiagnostics = default(Object))
        {
            this.Api = api;
            this.ClientRequestId = clientRequestId;
            this.RequestId = requestId;
            this.Url = url;
            this.Recursive = recursive;
            this.Sequencer = sequencer;
            this.Identity = identity;
            this.StorageDiagnostics = storageDiagnostics;
        }

        /// <summary>
        /// The name of the API/operation that triggered this event.
        /// </summary>
        /// <value>The name of the API/operation that triggered this event.</value>
        [DataMember(Name="api", EmitDefaultValue=false)]
        public string Api { get; set; }

        /// <summary>
        /// A request id provided by the client of the storage API operation that triggered this event.
        /// </summary>
        /// <value>A request id provided by the client of the storage API operation that triggered this event.</value>
        [DataMember(Name="clientRequestId", EmitDefaultValue=false)]
        public string ClientRequestId { get; set; }

        /// <summary>
        /// The request id generated by the storage service for the storage API operation that triggered this event.
        /// </summary>
        /// <value>The request id generated by the storage service for the storage API operation that triggered this event.</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The path to the deleted directory.
        /// </summary>
        /// <value>The path to the deleted directory.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Is this event for a recursive delete operation.
        /// </summary>
        /// <value>Is this event for a recursive delete operation.</value>
        [DataMember(Name="recursive", EmitDefaultValue=false)]
        public string Recursive { get; set; }

        /// <summary>
        /// An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name.
        /// </summary>
        /// <value>An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name.</value>
        [DataMember(Name="sequencer", EmitDefaultValue=false)]
        public string Sequencer { get; set; }

        /// <summary>
        /// The identity of the requester that triggered this event.
        /// </summary>
        /// <value>The identity of the requester that triggered this event.</value>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public string Identity { get; set; }

        /// <summary>
        /// For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
        /// </summary>
        /// <value>For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.</value>
        [DataMember(Name="storageDiagnostics", EmitDefaultValue=false)]
        public Object StorageDiagnostics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageDirectoryDeletedEventData {\n");
            sb.Append("  Api: ").Append(Api).Append("\n");
            sb.Append("  ClientRequestId: ").Append(ClientRequestId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Recursive: ").Append(Recursive).Append("\n");
            sb.Append("  Sequencer: ").Append(Sequencer).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  StorageDiagnostics: ").Append(StorageDiagnostics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageDirectoryDeletedEventData);
        }

        /// <summary>
        /// Returns true if StorageDirectoryDeletedEventData instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageDirectoryDeletedEventData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageDirectoryDeletedEventData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Api == input.Api ||
                    (this.Api != null &&
                    this.Api.Equals(input.Api))
                ) && 
                (
                    this.ClientRequestId == input.ClientRequestId ||
                    (this.ClientRequestId != null &&
                    this.ClientRequestId.Equals(input.ClientRequestId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Recursive == input.Recursive ||
                    (this.Recursive != null &&
                    this.Recursive.Equals(input.Recursive))
                ) && 
                (
                    this.Sequencer == input.Sequencer ||
                    (this.Sequencer != null &&
                    this.Sequencer.Equals(input.Sequencer))
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.StorageDiagnostics == input.StorageDiagnostics ||
                    (this.StorageDiagnostics != null &&
                    this.StorageDiagnostics.Equals(input.StorageDiagnostics))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Api != null)
                    hashCode = hashCode * 59 + this.Api.GetHashCode();
                if (this.ClientRequestId != null)
                    hashCode = hashCode * 59 + this.ClientRequestId.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Recursive != null)
                    hashCode = hashCode * 59 + this.Recursive.GetHashCode();
                if (this.Sequencer != null)
                    hashCode = hashCode * 59 + this.Sequencer.GetHashCode();
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                if (this.StorageDiagnostics != null)
                    hashCode = hashCode * 59 + this.StorageDiagnostics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
