/*
 * Schema of Azure Storage events published to Azure Event Grid
 *
 * Describes the schema of the Azure Storage events published to Azure Event Grid. This corresponds to the Data property of an EventGridEvent.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Microsoft.Storage
{
    /// <summary>
    /// Schema of the Data property of an EventGridEvent for a Microsoft.Storage.LifecyclePolicyCompleted event.
    /// </summary>
    [DataContract]
    public partial class StorageLifecyclePolicyCompletedEventData :  IEquatable<StorageLifecyclePolicyCompletedEventData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageLifecyclePolicyCompletedEventData" /> class.
        /// </summary>
        /// <param name="scheduleTime">The time the policy task was scheduled..</param>
        /// <param name="deleteSummary">deleteSummary.</param>
        /// <param name="tierToCoolSummary">tierToCoolSummary.</param>
        /// <param name="tierToArchiveSummary">tierToArchiveSummary.</param>
        public StorageLifecyclePolicyCompletedEventData(string scheduleTime = default(string), StorageLifecyclePolicyActionSummaryDetail deleteSummary = default(StorageLifecyclePolicyActionSummaryDetail), StorageLifecyclePolicyActionSummaryDetail tierToCoolSummary = default(StorageLifecyclePolicyActionSummaryDetail), StorageLifecyclePolicyActionSummaryDetail tierToArchiveSummary = default(StorageLifecyclePolicyActionSummaryDetail))
        {
            this.ScheduleTime = scheduleTime;
            this.DeleteSummary = deleteSummary;
            this.TierToCoolSummary = tierToCoolSummary;
            this.TierToArchiveSummary = tierToArchiveSummary;
        }

        /// <summary>
        /// The time the policy task was scheduled.
        /// </summary>
        /// <value>The time the policy task was scheduled.</value>
        [DataMember(Name="scheduleTime", EmitDefaultValue=false)]
        public string ScheduleTime { get; set; }

        /// <summary>
        /// Gets or Sets DeleteSummary
        /// </summary>
        [DataMember(Name="deleteSummary", EmitDefaultValue=false)]
        public StorageLifecyclePolicyActionSummaryDetail DeleteSummary { get; set; }

        /// <summary>
        /// Gets or Sets TierToCoolSummary
        /// </summary>
        [DataMember(Name="tierToCoolSummary", EmitDefaultValue=false)]
        public StorageLifecyclePolicyActionSummaryDetail TierToCoolSummary { get; set; }

        /// <summary>
        /// Gets or Sets TierToArchiveSummary
        /// </summary>
        [DataMember(Name="tierToArchiveSummary", EmitDefaultValue=false)]
        public StorageLifecyclePolicyActionSummaryDetail TierToArchiveSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageLifecyclePolicyCompletedEventData {\n");
            sb.Append("  ScheduleTime: ").Append(ScheduleTime).Append("\n");
            sb.Append("  DeleteSummary: ").Append(DeleteSummary).Append("\n");
            sb.Append("  TierToCoolSummary: ").Append(TierToCoolSummary).Append("\n");
            sb.Append("  TierToArchiveSummary: ").Append(TierToArchiveSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageLifecyclePolicyCompletedEventData);
        }

        /// <summary>
        /// Returns true if StorageLifecyclePolicyCompletedEventData instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageLifecyclePolicyCompletedEventData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageLifecyclePolicyCompletedEventData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScheduleTime == input.ScheduleTime ||
                    (this.ScheduleTime != null &&
                    this.ScheduleTime.Equals(input.ScheduleTime))
                ) && 
                (
                    this.DeleteSummary == input.DeleteSummary ||
                    (this.DeleteSummary != null &&
                    this.DeleteSummary.Equals(input.DeleteSummary))
                ) && 
                (
                    this.TierToCoolSummary == input.TierToCoolSummary ||
                    (this.TierToCoolSummary != null &&
                    this.TierToCoolSummary.Equals(input.TierToCoolSummary))
                ) && 
                (
                    this.TierToArchiveSummary == input.TierToArchiveSummary ||
                    (this.TierToArchiveSummary != null &&
                    this.TierToArchiveSummary.Equals(input.TierToArchiveSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduleTime != null)
                    hashCode = hashCode * 59 + this.ScheduleTime.GetHashCode();
                if (this.DeleteSummary != null)
                    hashCode = hashCode * 59 + this.DeleteSummary.GetHashCode();
                if (this.TierToCoolSummary != null)
                    hashCode = hashCode * 59 + this.TierToCoolSummary.GetHashCode();
                if (this.TierToArchiveSummary != null)
                    hashCode = hashCode * 59 + this.TierToArchiveSummary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
